From e1e90a1a3dc48b2541a77eb5e5f046ba80ef8e5a Mon Sep 17 00:00:00 2001
From: Egor Gorbachev <7gorbachevm@gmail.com>
Date: Tue, 10 Aug 2021 22:50:54 +0300
Subject: [PATCH] t

---
 .../__snapshots__/filter-parser.test.ts.snap  | 23 +++++
 components/grid/filters/filter-modal.tsx      | 20 ++++
 components/grid/filters/filter-parser.test.ts | 97 +++++++++++++++++++
 components/grid/filters/filter-parser.ts      | 14 ++-
 .../grid/filters/filters/enum-filter.tsx      | 36 +++++++
 .../grid/filters/filters/input-filter.tsx     | 13 +++
 translations/en.json                          |  2 +
 7 files changed, 204 insertions(+), 1 deletion(-)
 create mode 100644 components/grid/filters/filters/enum-filter.tsx
 create mode 100644 components/grid/filters/filters/input-filter.tsx

diff --git a/components/grid/filters/__snapshots__/filter-parser.test.ts.snap b/components/grid/filters/__snapshots__/filter-parser.test.ts.snap
index 63855f7..5547a4a 100644
--- a/components/grid/filters/__snapshots__/filter-parser.test.ts.snap
+++ b/components/grid/filters/__snapshots__/filter-parser.test.ts.snap
@@ -16,6 +16,29 @@ Array [
 ]
 `;
 
+exports[`filter-parser parses custom filters 1`] = `
+Array [
+  Object {
+    "property": "text",
+    "type": "input",
+  },
+  Object {
+    "property": "createdAt",
+    "type": "date",
+  },
+  Object {
+    "enum": Object {
+      "ERROR": 4,
+      "INFO": 1,
+      "NOTICE": 2,
+      "WARNING": 3,
+    },
+    "property": "severity",
+    "type": "enum",
+  },
+]
+`;
+
 exports[`filter-parser parses fullText only 1`] = `
 Array [
   Object {
diff --git a/components/grid/filters/filter-modal.tsx b/components/grid/filters/filter-modal.tsx
index fa53975..bc4e2df 100644
--- a/components/grid/filters/filter-modal.tsx
+++ b/components/grid/filters/filter-modal.tsx
@@ -6,6 +6,8 @@ import { HasId } from '../../../model/hydra';
 import { ListStore } from '../../../store/list-store';
 import { BoolFilter } from './filters/bool-filter';
 import { DateRangeFilter } from './filters/date-range-filter';
+import { InputFilter } from './filters/input-filter';
+import { EnumFilter } from './filters/enum-filter';
 
 const CustomToggle = React.forwardRef(({ children, onClick }: any, ref) => (
   <Button
@@ -70,6 +72,24 @@ export const FilterModal = observer(<Entity extends HasId>(props: Props<Entity>)
                 );
               }
 
+              if (gridFilter.type === 'input') {
+                return (
+                  <label key={i} className={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>
+                    <FormattedMessage id={`riveradmin.filters.labels.${gridFilter.property}`} />
+                    <InputFilter fieldName={gridFilter.property} />
+                  </label>
+                );
+              }
+
+              if (gridFilter.type === 'enum') {
+                return (
+                  <label key={i} className={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>
+                    <FormattedMessage id={`riveradmin.filters.labels.${gridFilter.property}`} />
+                    <EnumFilter fieldName={gridFilter.property} dropdown={gridFilter.enum} />
+                  </label>
+                );
+              }
+
               return null;
             })}
           </div>
diff --git a/components/grid/filters/filter-parser.test.ts b/components/grid/filters/filter-parser.test.ts
index 89618e4..c73e190 100644
--- a/components/grid/filters/filter-parser.test.ts
+++ b/components/grid/filters/filter-parser.test.ts
@@ -68,4 +68,101 @@ describe('filter-parser', () => {
     const result = parseHydraFilters(response);
     expect(result).toMatchSnapshot();
   });
+
+  it('parses custom filters', () => {
+    const response = {
+      '@id': '/api/admin_notifications',
+      '@type': 'hydra:Collection',
+      'hydra:member': [
+        {
+          '@type': 'admin_notification',
+          '@id': '/api/admin_notifications/43d702db-ff0c-4493-8889-1a0e7f244d0d',
+          id: '43d702db-ff0c-4493-8889-1a0e7f244d0d',
+          text: 'Number: 972795158570 not exists or not properly configured',
+          createdAt: '2021-08-10T17:43:35+00:00',
+          severity: 3,
+          context: [],
+          ownerName: 'Test owner',
+        },
+        {
+          '@type': 'admin_notification',
+          '@id': '/api/admin_notifications/74b859bd-70d8-438f-a664-c218a970e17a',
+          id: '74b859bd-70d8-438f-a664-c218a970e17a',
+          text: 'Number: 972795126038 not exists or not properly configured',
+          createdAt: '2021-08-10T17:42:39+00:00',
+          severity: 3,
+          context: [],
+          ownerName: null,
+        },
+      ],
+      'hydra:totalItems': 2,
+      'hydra:search': {
+        '@type': 'hydra:IriTemplate',
+        'hydra:template':
+          '/api/admin_notifications{?text,text[],ownerName,ownerName[],createdAt[before],createdAt[strictly_before],createdAt[after],createdAt[strictly_after],severity,severity[]}',
+        'hydra:variableRepresentation': 'BasicRepresentation',
+        'hydra:mapping': [
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'text',
+            property: 'riveradmin_input:text',
+            required: false,
+          },
+          { '@type': 'IriTemplateMapping', variable: 'text[]', property: 'text', required: false },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'ownerName',
+            property: 'ownerName',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'ownerName[]',
+            property: 'ownerName',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'createdAt[before]',
+            property: 'createdAt',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'createdAt[strictly_before]',
+            property: 'createdAt',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'createdAt[after]',
+            property: 'createdAt',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'createdAt[strictly_after]',
+            property: 'createdAt',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'severity',
+            property:
+              'riveradmin_enum:{\u0022INFO\u0022:1,\u0022NOTICE\u0022:2,\u0022WARNING\u0022:3,\u0022ERROR\u0022:4}',
+            required: false,
+          },
+          {
+            '@type': 'IriTemplateMapping',
+            variable: 'severity[]',
+            property: 'severity',
+            required: false,
+          },
+        ],
+      },
+    } as any;
+
+    const result = parseHydraFilters(response);
+    expect(result).toMatchSnapshot();
+  });
 });
diff --git a/components/grid/filters/filter-parser.ts b/components/grid/filters/filter-parser.ts
index a599879..75a3ad7 100644
--- a/components/grid/filters/filter-parser.ts
+++ b/components/grid/filters/filter-parser.ts
@@ -1,10 +1,11 @@
 import { CollectionResponse } from '../../../model/hydra';
 
-export type GridFilterType = 'fullText' | 'date' | 'bool';
+export type GridFilterType = 'fullText' | 'date' | 'bool' | 'input' | 'enum';
 
 export type GridFilter = {
   type: GridFilterType;
   property?: string;
+  enum?: { [key in string]: number };
 };
 
 export const parseHydraFilters = (response: CollectionResponse<any>): GridFilter[] => {
@@ -22,6 +23,17 @@ export const parseHydraFilters = (response: CollectionResponse<any>): GridFilter
     if (item.variable.endsWith('[before]')) {
       gridFilters.push({ type: 'date', property: item.property });
     }
+
+    if (item.property?.startsWith('riveradmin_input')) {
+      gridFilters.push({ type: 'input', property: item.variable })
+    }
+
+    if (item.property?.startsWith('riveradmin_enum')) {
+      const enumJson = item.property.replace('riveradmin_enum:', '');
+      const enumParsed = JSON.parse(enumJson);
+      gridFilters.push({ type: 'enum', enum: enumParsed, property: item.variable })
+    }
+
     if (item.property?.startsWith('riveradmin_bool')) {
       const property = item.property.match(/\[(.+)]/)[1];
       if (property) {
diff --git a/components/grid/filters/filters/enum-filter.tsx b/components/grid/filters/filters/enum-filter.tsx
new file mode 100644
index 0000000..fef19e9
--- /dev/null
+++ b/components/grid/filters/filters/enum-filter.tsx
@@ -0,0 +1,36 @@
+import React from 'react';
+import { Field } from 'react-final-form';
+import Select from 'react-select';
+import { css } from '@emotion/css/macro';
+
+type Props = {
+  fieldName: string;
+  dropdown: { [key in string]: number };
+};
+
+export const EnumFilter = (props: Props) => {
+  return (
+    <Field name={props.fieldName} groupClassName={'mb-0'}>
+      {({ input }) => {
+        const options = Object.entries(props.dropdown).map(([key, value]) => ({
+          value: value,
+          label: key,
+        }));
+
+        return (
+          <Select
+            className={css`
+              min-width: 250px;
+            `}
+            value={options.filter((option) => Number(option.value) === Number(input.value))}
+            onChange={(e) => {
+              // @ts-ignore
+              input.onChange(e.value);
+            }}
+            options={options}
+          />
+        );
+      }}
+    </Field>
+  );
+};
diff --git a/components/grid/filters/filters/input-filter.tsx b/components/grid/filters/filters/input-filter.tsx
new file mode 100644
index 0000000..c56dcbe
--- /dev/null
+++ b/components/grid/filters/filters/input-filter.tsx
@@ -0,0 +1,13 @@
+import React from 'react';
+import { Field } from 'react-final-form';
+import { InputAdapter } from '../../../ui/input-adapter';
+
+type Props = {
+  fieldName: string;
+};
+
+export const InputFilter = (props: Props) => {
+  const { fieldName } = props;
+
+  return <Field name={fieldName} groupClassName={'mb-0'} component={InputAdapter} />;
+};
diff --git a/translations/en.json b/translations/en.json
index 82d839b..f953ec9 100644
--- a/translations/en.json
+++ b/translations/en.json
@@ -20,6 +20,8 @@
   "riveradmin.filters.labels.createdAt": "Created",
   "riveradmin.filters.labels.isApproved": "Is approved",
   "riveradmin.filters.labels.payment": "Payment",
+  "riveradmin.filters.labels.text": "Text",
+  "riveradmin.filters.labels.severity": "Severity",
   "riveradmin.impersonate-user": "Impersonate user",
   "riveradmin.data-saved": "Data has been saved",
   "riveradmin.logout": "Logout"
-- 
2.30.2

